import React from "react";
import ReactDOM from "react-dom";
import firebase from "firebase";
import "firebase/firestore";
import "./styles.css";
import Table from "@material-ui/core/Table";
import TableBody from "@material-ui/core/TableBody";
import TableCell from "@material-ui/core/TableCell";
import TableHead from "@material-ui/core/TableHead";
import TableRow from "@material-ui/core/TableRow";
import TablePagination from "@material-ui/core/TablePagination";
import Paper from "@material-ui/core/Paper";

var config = {
  apiKey: "AIzaSyBvp7BHEo2vlrjLK7YTq9v81ChmjBVF0MA",
  authDomain: "mariborjs-1ee9a.firebaseapp.com",
  databaseURL: "https://mariborjs-1ee9a.firebaseio.com",
  projectId: "mariborjs-1ee9a",
  storageBucket: "mariborjs-1ee9a.appspot.com",
  messagingSenderId: "851777913278"
};
if (!firebase.apps.length) {
  firebase.initializeApp(config);
}

const db = firebase.firestore();

class App extends React.Component {
  constructor() {
    super();

    this.state = {
      data: [],
      page: 0,
      rowsPerPage: 10
    };
  }
  componentDidMount() {
    this.query();
  }

  async query(params) {
    const response = await db
      .collection("users")
      .orderBy("id")
      .onSnapshot(snapshot => {
        this.setUsers(snapshot);
      });
  }

  setUsers(documentSnapshot) {
    const users = [...this.state.data];
    console.log(users.length);
    documentSnapshot.docChanges().forEach(change => {
      if (change.type === "added") {
        const user = change.doc.data();
        users.push({
          id: user.id,
          firstName: user.firstName,
          lastName: user.lastName,
          gender: user.gender
        });
      }
      if (change.type === "modified1") {
        const updatedUser = change.doc.data();
        console.log("updating", updatedUser);
        var index = users.findIndex(user => user.id === updatedUser.id);
        this.users[index] = updatedUser;
      }
      if (change.type === "removed1") {
        const removedUser = change.doc.data();
        console.log("removing", removedUser);
        const index = users.findIndex(user => user.id === removedUser.id);
        this.users.splice(index, 1);
      }
    });
    this.setState({
      data: users
    });
  }

  handleChangePage = (event, page) => {
    this.setState({ page });
  };

  handleChangeRowsPerPage = event => {
    this.setState({ rowsPerPage: event.target.value });
  };

  render() {
    const { data, rowsPerPage, page } = this.state;
    const emptyRows =
      rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);
    let display;

    if (data.length) {
      display = (
        <Paper>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>ID</TableCell>
                <TableCell>First Name</TableCell>
                <TableCell>Last Name</TableCell>
                <TableCell>Gender</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {data
                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                .map(n => {
                  return (
                    <TableRow key={n.id}>
                      <TableCell component="th" scope="row">
                        {n.id}
                      </TableCell>
                      <TableCell>{n.firstName}</TableCell>
                      <TableCell>{n.lastName}</TableCell>
                      <TableCell>{n.gender}</TableCell>
                    </TableRow>
                  );
                })}
              {emptyRows > 0 && (
                <TableRow style={{ height: 49 * emptyRows }}>
                  <TableCell colSpan={6} />
                </TableRow>
              )}
            </TableBody>
          </Table>
          <TablePagination
            component="div"
            count={data.length}
            rowsPerPage={rowsPerPage}
            page={page}
            onChangePage={this.handleChangePage}
            onChangeRowsPerPage={this.handleChangeRowsPerPage}
          />
        </Paper>